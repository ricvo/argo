# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "ThreeByThreeLines",
"binary" : 1,
"flip_fraction" : 0.,
"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{

"model" : "VAE.VAE",
"grad_clipping" : ("clip_by_global_norm", {"value" : 3}),

"stochastic" : [0],
"stochastic_noise_param" : [0.01], #0, ,0.00001,0.001,0.1,1

"denoising" : [0],
"rescale" : [0.00001],

"optimizer": [(opt, {"beta1":0.9, "beta2":0.999, "epsilon":1e-8, "learning_rate" : lr}) for opt in ["AdamOptimizer"] for lr in [1e-4]
             ],

"cost_function": [("ELBO", {"beta" : 0.5,
		            "warm_up_method" : ("warm_up", {"epoch" : 10})})
		 ],

"batch_size_train" : 32,
"batch_size_eval" : 32,

"samples" : [1], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

"network_architecture" : [
        {
        "encoder" : [
            ("BatchFlatten", {}, 0),
            ("Linear", {"output_size" : 20}, 1),
            ("Linear", {"output_size" : 10}, 1),
            ("GaussianDiagonal", {"module_tuple" : ("LinearWN", {"output_size" : 9,
                                                                 "use_weight_norm" : False}),
				                                 "minimal_covariance": 0.0
                                  }, 0)
                    ],
        "decoder" : [
            ("Linear", {"output_size" : 10}, 1),
            ("Linear", {"output_size" : 20}, 1),
                ("Bernoulli", {}, 0)
             ]
        }
	],

#"weights_reg" : [("contrib.layers.l2_regularizer", {"scale" : 0.5})],
#"bias_reg" : [("contrib.layers.l2_regularizer",    {"scale" : 0.5})],

"weights_reg" : [None],
"bias_reg" :    [None],

"weights_init" : [("contrib.layers.xavier_initializer",{})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : 0.1})],

"epochs" : 300,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",
#"time_reference" : "steps",

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 10, #0.1,

# how often to log stats (txt) and save summaries
"save_summaries" : 1,
"save_summaries_period" : 10,
"stats_period" : 1,

# skips the first k stats for the plot
"plot_offset" : 1,


"GradientsHook" : {"period" : 10},

"ImagesInputHook" : {"period" : 10,
                     "how_many" : 18,
                     "n_images_columns" : 6},

"ImagesReconstructHook" : {"period" : 10,
                           "n_images_columns" : 16,
                           "images_indexes" : {
                                                 "train" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 "validation" : [0,10,20,30,40,50,110,120,130,140,150,210,220,230,240,250],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 10,
                        "n_images_columns" : 6,
                        "n_gen_samples" : 18
                       },

#"TwoDimPCALatentVariablesHook" : {"period" : 10,
#                                  },
#
"PCALatentVariablesHook" : {"period" : 10,
                             },
#
#
#"LogpImportanceSamplingHook" : {"period" : 10,
#                                "n_samples" : [100],
#                                "batch_size" : 1000,
#                                "repetitions" : 1
#                       	       },
#
#"VAELinearInterpolationHook" : {"period" : 10,
#                               "n_images" : 15,
#                               "images_indexes" : {
#                                                 "train" : [(0,50),
#                                                            (100,230),
#                                                            (200,790),
#                                                            (300,600),
#                                                            (400,1000)],
#                                                 "validation" : [(0,50),
#                                                                 (100,230),
#                                                                 (200,790),
#                                                                 (300,600),
#                                                                 (400,1000)],
#                                                 },
#                            },


#"dirName" : "/ssd_data",
#"dirName" : "/data1",
"dirName" : "temp",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {0},
            "cores_per_GPU" : 2,

	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],

}
]
