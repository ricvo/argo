
# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "CIFAR10",
"stochastic" : 0,
},
{
"model" : "VAE.VAE",
"stochastic" : [1], # 1],
"stochastic_noise_param" : [0.1, 0.03], #[0.03], #0, ,0.00001,0.001,0.1,1
"denoising" : [0, 1], # 1],

"warm_up_method" : [("warm_up", {"epoch" : 3})],

"optimizer": [("AdamOptimizer", {"learning_rate" : 0.0001,
	    		         "beta1": 0.9,
                      		 "beta2":0.999})],

#"grad_clipping" : ("clip_by_global_norm", {"value" : 3}), # NB not implemented in the filename

"cost_function": [#("IELBO", {"beta" : 1.0, "h" : 0.01, "normalize" : 1}),
                  ("ELBO", {"beta" : 1.0,
		            "warm_up_method" : ("warm_up", {"epoch" : 5})})
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.9},
		  ],

"samples" : [10], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

"network_architecture" : [
#    {
#        "encoder" : [
#                    ("ResNet18", {"output_size" : 100, "use_weight_norm" : True}, 1),
#                    ("LinearWN", {"output_size" : 100, "use_weight_norm" : True}, 1),
#    	             ("GaussianDiagonal", {"output_size" : 25,
#                                          "module_tuple" : ("LinearWN", {"use_weight_norm" : True})
#                                         }, 0)
#                    ],
#                                #  "contractive_regularizer" : ("geometric_contractive_regularizer",
#                                #                                {"scale_mean" : 0.1,
#                                #                                "scale_covariance" : 0.1,
#                                #                                "norm" : 2})
#				                 #           }, 0)],
#
#        "decoder" : [
#                    ("LinearWN", {"output_size" : 4 * 4 * 512, "use_weight_norm" : True}, 1),
#                    ("BatchReshape", {"shape" : (4, 4, 512)}, 0),
#                    ("ConvNet2DTranspose", {"output_channels": [256, 128, 3],
#                                            "output_shapes" : [[8, 8], [16, 16], [32, 32]],
#                                            "strides" : [2],
#                                            "paddings" : ["SAME"],
#                                            "kernel_shapes" : [[5, 5]]}, 1),
#                    ("LogitNormalDiagonal", {
#                                            "module_tuple" : ("Conv2DTranspose", {"kernel_shape" : [3,3],
#                                                                                  "stride" : 1,
#                                                                                  "padding" : "SAME"})
#                                            }, 0)
#                    ]
#    }
    {
        "encoder" : [
                    ("ConvNet2D", {"output_channels": [256, 512, 1024],
                                   "strides" : [2, 2, 2],
                                   "paddings" : ["SAME"],
                                   "kernel_shapes" : [[5, 5]]}, 1),
                    ("BatchFlatten", {}, 0),
                   	("GaussianDiagonal", {"output_size" : 1024,
                                          "module_tuple" : ("LinearWN", {"use_weight_norm" : False})}, 0)
                    ],
                                #  "contractive_regularizer" : ("geometric_contractive_regularizer",
                                #                                {"scale_mean" : 0.1,
                                #                                "scale_covariance" : 0.1,
                                #                                "norm" : 2})
				                #           }, 0)],

        "decoder" : [
                    ("LinearWN", {"output_size" : 4 * 4 * 1024, "use_weight_norm" : False}, 1),
                    ("BatchReshape", {"shape" : (4, 4, 1024)}, 0),
                    ("ConvNet2DTranspose", {"output_channels": [512, 256, 3],
                                            "output_shapes" : [[8, 8], [16, 16], [32, 32]],
                                            "strides" : [2, 2, 2],
                                            "paddings" : ["SAME"],
                                            "kernel_shapes" : [[5, 5]]}, 1),
                    
                    ("BatchFlatten", {}, 0),
                   	("LogitNormalDiagonalPlusMinusOne", {
                                            "module_tuple" : ("LinearWN", {"use_weight_norm" : False})}, 0)
                    ]
    }
],

"weights_reg" : [("contrib.layers.l2_regularizer", {"scale" : sc}) for sc in [0.1, 0.5]],
#"bias_reg" : [("contrib.layers.l2_regularizer",    {"scale" : 0.001})],

#"weights_reg" : [None],
"bias_reg" :    [None],


"weights_init" : [("contrib.layers.xavier_initializer",{})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : 0.1})],
#	       ("constant_initializer", {'value' : 0.01})],

"activation" : ["relu"],
"epochs" : 100,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",

# how often to log stats (txt) and save summaries (related to the stats)
"stats_period" : 1,

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 10,

# how often to save other specific summaries
"save_summaries" : 0,
"save_summaries_period" : 10,

# skips the first k stats for the plot
"plot_offset" : 1,


"ImagesInputHook" : {"period" : 25,
                    "how_many" : 18,
                    "n_images_columns" : 6},

"ImagesReconstructHook" : {"period" : 1,
                            "n_images_columns" : 6,
                            "images_indexes" : {
                                                "train" : [0,100,200,300,400,500],
                                                "validation" : [0,100,200,300,400,500],
                                                },
                            },

"ImagesGenerateHook" : {"period" : 10,
                        "n_images_columns" : 6,
                        "n_gen_samples" : 18
                        },

#"LogpImportanceSamplingHook" : {"period" : 100,
#		       	        "n_samples" : [1,10],
#		     		"batch_size" : 1000,
#				"repetitions" : 3
#                       	       },


"dirName" : "temp",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : [3], #{0,1,2,3},
            "cores_per_GPU" : 1,
            "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
            }
            ]


}
]
