# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
    {
        'dataName': 'CMB',
        "data_dir": '/home/hector/CMB_data_finomega_cdm_A_s-uniform-pppr_rot0-pppr_eq2-pppr_lat1-aug1+patch_s10+pic_s224',
        #'/home/hector/Test1/Prueba_other_parameters/Folder_Images_array_set/',
        # "data_dir" : '/data1/Folder_Images_array_set/', #captamerica
        "augm_data": 1,
        "only_center": False,
        "Normalize_data":1,
        "debug_mode": False,
	"parameters" : [['omega_b','omega_cdm','A_s']],
	"fraction_dataset" : [100],
        "id_note": "First_result"
    },
    {
        "stochastic": 0,  # ignore this for the moment
        "stochastic_noise_param": [0],  # ignore this for the moment
        "dtype": "float32",  # datatype for weights, use float32

        "task": "regression",  # it can be classificiation or regression

	"optimizer": [("AdamOptimizer", {"learning_rate" : 0.001,	
	 	    			 "beta1": 0.9,	 
                    	 		 "beta2":0.999}),
	     	     ("GradientDescentOptimizer", {"learning_rate" : 0.005})],

        # "natural_gradient": [{"implementation" : 0}],
        # "network_creator" : ['vgg16'],

        "network_architecture": [
         #    [("conv2d", {"filters" : 10, "kernel_size" : (3,3)}),
         #       ("conv2d", {"filters" : 10, "kernel_size" : (3,3)}),
         #       ("flatten", {}),
         #    ("dense", {"units" : 200}),
         #    ("dense", {"units" : 100}),
         #    ("dense", {"units" : 2,"activation":None})
         #     ]
         #   ['vgg16', # if the first element is a string, it is used for topology id
         #    ("conv2d", {"filters": 64, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 64, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 64, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 64, "kernel_size": (3, 3)}),
         #    ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
         #    ("conv2d", {"filters": 128, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 128, "kernel_size": (3, 3)}),
         #    ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
         #    ("conv2d", {"filters": 256, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 256, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 256, "kernel_size": (3, 3)}),
         #    ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
         #    ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
         #    ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
         #    ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
         #    ("flatten", {}),
         #    ("dense", {"units": 1000}),
         #    ("dense", {"units" : 2,"activation":None})
         #   ]

            ['vgg19', # if the first element is a string, it is used for topology id
             ("conv2d", {"filters": 64, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 64, "kernel_size": (3, 3)}),
             ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
             ("conv2d", {"filters": 128, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 128, "kernel_size": (3, 3)}),
             ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
             ("conv2d", {"filters": 256, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 256, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 256, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 256, "kernel_size": (3, 3)}),
             ("max_pooling2d", {"pool_size": (2, 2), "strides": (1, 1)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("conv2d", {"filters": 512, "kernel_size": (3, 3)}),
             ("max_pooling2d", {"pool_size": (2, 2), "strides": (2, 2)}),
             ("flatten", {}),
             ("dense", {"units": 2000}),
             ("dense", {"units": 1000}),
             ("dense", {"units": 100}),
             ("dense", {"units" : 2,"activation":None})
            ] 



        ],

        "bit_flip": [0],
    # applies a bit flip with proability 0, ignore for the moment
        "drop_out": [0],  # dropout, ignore for the moment
        "batch_size": [50, 80],  #
        "batch_size_test": [50, 80],  #
        "regularizer": [0],  # not implemented for the moment
	# "weights_init" : [("contrib.layers.xavier_initializer",{})], # list of (initializer, initializer_kwargs). the initializer must be possible to find as tf.initializer
        # "bias_init" : [("constant_initializer", {"value" : 0.1})],
	"activation_fct": ["elu"],  # you can also try "relu"
        "epochs": 2200,  # number of epochs
    },
    {
        "check_ops": 0,  # for debug purposes

        "n_epoch_log": 1,  # how often I ouput logs on std
        "n_epoch_log": 1,  # how often I ouput plot on file

        "save_model": 1,  # if 1, the model is savedevery X epocs
        "n_epoch_save_model": 10,  # X

        "log_gradient": 0,  # ignore for the moment, needs to be reimplemented
        "n_epoch_log_gradient": 1,  #

        "log_tf": 0,  # ignore this
        "verbose": 1,  # if 1, the algorithm prints comments

        # "launcher": "CMBLauncher",
        "launcher": "training.core.TrainingLauncher.FeedForwardLauncher",

        # do not change this folder, use a copy of this file instead
        "dirName": "/data1/CMB_results1",  # folder where data is saved
        # "dirName" : "/data1/CMB_Second_try",  	        # folder where data is saved
        # experiments should besaved in /data2/XXX (foca) or /data/XXX
        # (all the rest)
        "seed": 0,  # do not change
        "runs": 1,  # number of run the algorithm is executed
        # set pool size for GPU

        "nodes": [{"used_GPUs": {0,2},
                   "cores_per_GPU": 1,
                   "IP": "localhost"
                   # num_consumers = multiprocessing.cpu_count() * 2
                   }
                  ]
    }
]
