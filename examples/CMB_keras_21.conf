[
{
"dataName" : "CMB_multifilters_21",
#'data_dir': '/ssd_data/CMB/hector/three_params_Nov/Polar/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0-cod_hp+patch_s20+pic_s256/', ###PolarizationIronman
'data_dir': '/ssd_data/CMB/Dataset21_cm_Total/ION_Tvir_MIN_HII_EFF_FACTOR_sigma_8_omega_m-uniform-iz6-fz12-samz20-pxl128-sMpc192/',##iron 21
#"data_dir" : '/ssd_data/CMB/hector/FullMap/New2019/Dataset-256-20-Lens-tools-01noise/omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0+patch_s20+pic_s256/', #iroman
#"data_dir" : '/data2/CMB/omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0+patch_s20+pic_s256/', #wonderwoman
#"data_dir" :  '/ssd_data/CMB/hector/three_params_July/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0-cod_lt+patch_s20+pic_s256/',#iroman
#"data_dir" :  '/ssd_data/CMB/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0cod_lt+patch_s20+pic_s256/',#capmerica
#"data_dir"  :  '/ssd_data/CMB/POL/PolarH0/H0_omega_b_omega_cdm_A_s_n_s_tau_reio_N_ur-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0-cod_hp+patch_s20+pic_s256/', #thor

"fraction_dataset" : 100,   #(0,100); #percent of dataset
"parameters" : [['sigma_8' ,'omega_m' ,'HII_EFF_FACTOR','ION_Tvir_MIN']],
},
{

"stochastic" : [0],
"stochastic_noise_param" : [0], #, 0.001,0.01],

"model" : "Prediction.RegressionModel",      # it can be classificiation or regression

"network" : "PredictionKerasNetwork",
#"network_architecture" : [
#             [("bayesian_vgg", {}), # {"filters" : [16, 192, 384, 384, 256]}),
#             [("Alex_net_modif", {}),
#             ("MultivariateNormalTriL", {"bayesian_layers" : True})]],

"network_architecture" : [

              [("BayesianVgg", {
                       "filters" : [32, 32,32,32,64],#[32, 32, 32, 32, 64],#[32, 64, 64, 128, 128],#[16, 16, 32, 32, 32]
                       "kernels" : [3, 3, 3, 3, 3],
                       "strides" : [2, 2, 2, 2, 2],
                       "renorm" : rn,
                      "flipout": fl,
                      "final_activation" : True,
                      "pooling" : pool}),
              ("MultivariateNormalTriL", {"bayesian_layers" : bl, "flipout" : fl}),
              flow_params
              ]
              for bl in [False]
              for rn in [True]
              for fl in [True] #[True]
              for pool in ["max"] #, "avg", None]
              for flow_params in [None] + [
                                           {
                                            'name' : fn, # MAF, IAF or NVP
                                            'num_bijectors' : 4,
                                            'hidden_channels' : 512,
                                           }
                                           for fn in ['NVP', 'MAF', 'IAF']
                                          ]

#               [
#               ("bayesian_alex_net", {
#                       "filters" : [32, 32, 32, 32, 32], #[64, 64, 128, 128, 128],  #[64, 128, 384, 384, 128], #[64, 192, 384, 384, 256]
#                       "kernels" : [7, 5, 3, 3, 3],
#                       "renorm" : False,
#                       "strides" : [4, 2, 2, 2, 2],
#                       "flipout": fl,
#                       "pooling" : pool}),
#               ("MultivariateNormalTriL", {"bayesian_layers" : bl, "flipout" : fl})]
#               for fl in [False]
#               for bl in [False]
#               for pool in ["max"] # "avg"]

	      ],

"init_reg_kwargs" : [{

           "kernel_initializer" :("glorot_normal_initializer", {}),
           "bias_initializer": ("initializers.constant", {"value" : 0.001}),

           "kernel_regularizer": ("contrib.layers.l2_regularizer", {"scale" : klreg}),
           "bias_regularizer": ("contrib.layers.l2_regularizer", {"scale" : blreg}),

           "activity_regularizer": None,
        }
        for klreg in [1e-5]
        for blreg in [1e-5]
        ],

"init_reg_kwargs_bayes" : [
        {
        "posterior" :
             {
             "kernel_untr_scale_initializer" : ("initializers.random_normal", {"mean" : -9., "stddev" : 1e-2}),
             "kernel_loc_initializer" : klinit,

             "bias_loc_initializer" : ("initializers.constant", {"value" : bli}),

             "kernel_loc_regularizer" : ("contrib.layers.l2_regularizer", {"scale" : 1e-5}),
             "kernel_untr_scale_regularizer" : ("contrib.layers.l2_regularizer", {"scale" : regul}), #("sum_regularizer", {"scale" : ksreg}),
             "bias_loc_regularizer" : ("contrib.layers.l2_regularizer", {"scale" : 1e-5}),

             "kernel_untr_scale_constraint_max" : -1.6,

             "activity_regularizer": None,
             },

        "prior" : prior_kwargs,
        }

         for bli in [0.1] #, 1., #flip10.
         for regul in [1e-6]#flip-5
         for klinit in [
             #("initializers.random_normal", {"mean" : 0., "stddev" : 1e-2}),
             #("initializers.random_normal", {"mean" : 0., "stddev" : 1e-4}),
             ("glorot_normal_initializer", {})
         ]
#          for prior_untr_scale in [-3.] #, 3.]
        for prior_kwargs in [
#                      {
#                      "default" : True
#                      },
                     {
                     "default" : False,
                     "kernel_loc_initializer" : ("initializers.constant", {"value" : 0.}),
                     "kernel_untr_scale_initializer" : ("initializers.constant", {"value" : 1.}),
                     "trainable" : True,
                     }
        ]
],


#aleatoric / stochastic prediction
#"cost_function": [("Likelihood", {})],

"cost_function": [("AlphaLikelihood", {'alpha_parameter':alpp, "n_samples":sam}) for sam in [10] for alpp in [0]], ## use 1, if use_alpha is False

"optimizer":  [ ("AdamOptimizer", {"learning_rate" :
                                        (1e-6,
                                        "exponential_decay", {"learning_rate" : 1e-4,
                                                              "decay_steps" : 2000, #flipout: 4000, reparametrization:8000
                                                              # total train samples: 43200. 43200/32 = 1350 steps per epoch
                                                              "decay_rate" : 0.9,
                                                              "staircase" : True
                                                             }
                                         ),
                                  "beta1" : 0.9,
                       			  "beta2" : 0.999}) ] ,

"grad_clipping" : ("clip_by_global_norm", {"value" : 100}),

"batch_size_train" : [16],
"batch_size_eval" : [16],


"epochs" : 181,                     # number of epochs

},
{
"check_ops" : 0,                # for debug purposes

"time_reference" : "epochs",
"stats_period" : 1,

"save_model" : 1,		# if 1, the model is savedevery X epocs
"save_model_period" : 20,      #0.1,

"plot_offset" : 10,

"save_summaries" : 1,
"save_summaries_period" : 5,

#"GradientsHook" : {"period" : 10},

"CorrelationHook" : {"period" : 30,
                     "n_samples" : 10},


# "ImagesInputHook" : {"period" : 1,
#                     "how_many" : 6,
#                     "n_images_columns" : 6,
#                     "until": 2},

# "MCDropoutHook" : {"period" : 180,
#                     "n_batches" : 80,
#                     "posterior_samples" : 2500},

"MCRegressionHook" : {"period" : 180,
                            "n_batches" : 80,
                            "posterior_samples" : 2500},

"WeightsHistogramHook" : {"period" : 30},

"dirName" : "/data2/temp",

	    			# experiments should besaved in /data2/XXX or /data1/XXX

"seed" : 0,			# do not change
"runs" : 1,			# number of run the algorithm is executed
# set pool size for GPU


"nodes" : [{"used_GPUs" : [2],
            "cores_per_GPU" : 1,
            "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
            }
            ]
}
]
