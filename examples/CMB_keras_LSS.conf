[
{
"dataName" : 'LSS',#,
#'data_dir': '/ssd_data/CMB/hector/Quijote_simulations/density_field_2D/latin_hypercube',##LSSironman
'data_dir': '/ssd_data/CMB/Quijote_simulations/density_field_2D/latin_hypercube',##LSScaptamer
#'data_dir': '/ssd_data/CMB/Quijote_simulations/density_field_2D/latin_hypercube',##LSSWW
#'data_dir': '/ssd_data/CMB/hector/three_params_Nov/Polar/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0-cod_hp+patch_s20+pic_s256/', ###PolarizationIronman
#'data_dir': '/ssd_data/CMB/Polar/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0-cod_hp+patch_s20+pic_s256/',##capt polar
#"data_dir" : '/ssd_data/CMB/hector/FullMap/New2019/Dataset-256-20-Lens-tools-01noise/omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0+patch_s20+pic_s256/', #iroman
#"data_dir" : '/data2/CMB/omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0+patch_s20+pic_s256/', #wonderwoman
#"data_dir" :  '/ssd_data/CMB/hector/three_params_July/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0-cod_lt+patch_s20+pic_s256/',#iroman
#"data_dir" :  '/ssd_data/CMB/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0cod_lt+patch_s20+pic_s256/',#capmerica
#"data_dir"  :  '/ssd_data/CMB/omega_b_omega_cdm_A_s-uniform-pppr_rot0-pppr_eq1-pppr_lat1-aug0-cod_lt+patch_s20+pic_s256/', #WM and thor

#"dataAugmentation" : [#("adjust_brightnessAsym", {"min_delta" : -0.1, "max_delta" : 0.1}, 0.8),                                                                                                          
#                       ("flip_up_down", {},0.25),                                                                                                                                                         
#                       ("flip_left_right", {}, 0.25),                                                                                                                                                     
#                     ],    

"fraction_dataset" : 100,   #(0,1); 0 if works with total dataset
"parameters" : [['omega_m','omega_b','h','n_s','sigma_8']],
},
{

"stochastic" : [1],
"stochastic_noise_param" : [0.0001],

"model" : "Prediction.RegressionModel",      # it can be classificiation or regression

"network" : "PredictionKerasNetwork",
#"network_architecture" : [
#             [("bayesian_vgg", {}), # {"filters" : [16, 192, 384, 384, 256]}),
#             [("Alex_net_modif", {}),
#             ("MultivariateNormalTriL", {"bayesian_layers" : True})]],

"network_architecture" : [

              [("bayesian_vgg", {
                       "filters" : [32, 32, 64, 64],#[16, 16, 32, 32, 32],[32, 64, 64, 128, 128],
                       "kernels" : [5, 3, 3, 3],
                       "strides" : [2, 2, 2, 2],
                       "renorm" : rn,
                      "flipout": fl,
                      "pooling" : pool}),
              ("MultivariateNormalTriL", {"bayesian_layers" : bl, "flipout" : fl})]
              for bl in [False]
              for rn in [True]
              for fl in [True] #[True]
              for pool in ['max','avg'] #, "avg",'max', None]

 #              [
 #              ("bayesian_alex_net", {
 #                      "filters" : [32, 32, 32, 32, 32], #[64, 64, 128, 128, 128],  #[64, 128, 384, 384, 128], #[64, 192, 384, 384, 256]
 #                      "kernels" : [7, 5, 3, 3, 3],
 #                      "renorm" : True,
 #                      "strides" : [4, 2, 2, 2, 2],
 #                      "flipout": fl,
 #                      "pooling" : pool}),
 #              ("MultivariateNormalTriL", {"bayesian_layers" : bl, "flipout" : fl})]
 #              for fl in [False]
 #              for bl in [False]
 #              for pool in ["max"] # "avg"]

	      ],

"init_reg_kwargs" : [{

           "kernel_initializer" : ("glorot_normal_initializer", {}),
           "bias_initializer":("initializers.constant", {"value" : 0.1}),

           "kernel_regularizer": ("contrib.layers.l2_regularizer", {"scale" : klreg}),
           "bias_regularizer": ("contrib.layers.l2_regularizer", {"scale" : blreg}),

           "activity_regularizer": None,
        }
        for klreg in [1e-2]
        for blreg in [1e-2]
        ],

"init_reg_kwargs_bayes" : [
        {
        "posterior" :
             {
             "kernel_untr_scale_initializer" : ("initializers.random_normal", {"mean" : -6., "stddev" : 1e-2}),
             "kernel_loc_initializer" : klinit,

             "bias_loc_initializer" : ("initializers.constant", {"value" : bli}),

             "kernel_loc_regularizer" : ("contrib.layers.l2_regularizer", {"scale" : 1e-3}),
             "kernel_untr_scale_regularizer" : ("contrib.layers.l2_regularizer", {"scale" : regul}), #("sum_regularizer", {"scale" : ksreg}),
             "bias_loc_regularizer" : ("contrib.layers.l2_regularizer", {"scale" : 1e-3}),

             "kernel_untr_scale_constraint_max" : -1.6,

             "activity_regularizer": None,
             },

        "prior" : prior_kwargs,
        }

         for bli in [0.01] #, 1., #flip10.
         for regul in [1e-2,1e-3]#flip-5
         for klinit in [
             #("initializers.random_normal", {"mean" : 0., "stddev" : 1e-2}),
             #("initializers.random_normal", {"mean" : 0., "stddev" : 1e-2}),
             ("glorot_normal_initializer", {})
         ]
#          for prior_untr_scale in [-3.] #, 3.]
        for prior_kwargs in [
#                      {
#                      "default" : True
#                      },
                     {
                     "default" : False,
                     "kernel_loc_initializer" : ("initializers.constant", {"value" : 0.}),
                     "kernel_untr_scale_initializer" : ("initializers.constant", {"value" : 0.1}),
                     "trainable" : True,
                     }
        ]
],


#aleatoric / stochastic prediction
#"cost_function": [("Likelihood", {})],
"cost_function": [("Likelihood", {'use_alpha':True, 'alpha_parameter':0.6,"alpha_samples":7})],

"optimizer":  [ ("AdamOptimizer", {"learning_rate" :
                                        (1e-9,
                                        "exponential_decay", {"learning_rate" : 1e-3,
                                                              "decay_steps" : destep, #flipout: 4000, reparametrization:8000
                                                              # total train samples: 43200. 43200/32 = 1350 steps per epoch
                                                              "decay_rate" : 0.9,
                                                              "staircase" : True
                                                             }
                                         ),
                                         "beta1" : 0.9,
                       			 "beta2" : 0.999} )
		for destep in [2000] ] ,

"grad_clipping" : ("clip_by_global_norm", {"value" : 100}),

"batch_size_train" : [32],
"batch_size_eval" : [32],


"epochs" : 501,                     # number of epochs

},
{
"check_ops" : 0,                # for debug purposes

"time_reference" : "epochs",
"stats_period" : 1,

"save_model" : 1,		# if 1, the model is savedevery X epocs
"save_model_period" : 20,      #0.1,

"plot_offset" : 10,

"save_summaries" : 1,
"save_summaries_period" : 5,

#"GradientsHook" : {"period" : 10},

"CorrelationHook" : {"period" : 10},


"ImagesInputHook" : {"period" : 10,
                    "how_many" : 6,
                    "n_images_columns" : 6,
                    "until": 100},

"MCDropoutHook" : {"period" : 9000,
                    "n_batches" : 80,
                    "posterior_samples" : 2500},

"WeightsHistogramHook" : {"period" : 10},

"dirName" : "/data1/Aumen/LSSal2",

	    			# experiments should besaved in /data2/XXX or /data1/XXX

"seed" : 0,			# do not change
"runs" : 1,			# number of run the algorithm is executed
# set pool size for GPU


"nodes" : [{"used_GPUs" : [2],

            "cores_per_GPU" : 1,
            "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
            }
            ]
}
]
