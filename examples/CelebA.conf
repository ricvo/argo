# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "CelebA",
"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{
"model" : "VAE.VAE", #"VAE_IAF"

"stochastic" : [1],
"stochastic_noise_param" : [0.03], #0, ,0.00001,0.001,0.1,1
"denoising" : [0],
"rescale" : [0.001],

#"warm_up_method" : [None,
#                    ("warm_up", {"epoch" : 5})],

"optimizer": [("AdamOptimizer", {"learning_rate" : 0.0001,
					  "beta1": 0.9,
                      			  "beta2":0.999})],

"grad_clipping" : ("clip_by_global_norm", {"value" : 3}), # NB not implemented in the filename

"cost_function": [#("IELBO", {"beta" : 1.0, "h" : 0.01, "normalize" : 1}),
                  ("ELBO", {"beta" : 1.0,
		            "warm_up_method" : ("warm_up", {"epoch" : 5})})
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.9},
		  ],
		  
#"cost_function": [{"cost" : 2, "alpha" : 0.3}],
#"cost_function": [{"cost" : "elbo", "beta" : 1.0},
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.9},
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.8},
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.7},
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.5},
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.1},
		  #{"cost" : "ielbo", "beta" : 1.0, "h" : 0.005, "normalize" : 1},
		  #{"cost" : "ielbo", "beta" : 1.0, "h" : 0.01, "normalize" : 1},
		  #{"cost" : "ielbo", "beta" : 1.0, "h" : 0.1, "normalize" : 1},
		  #{"cost" : "ielbo", "beta" : 1.0, "h" : 0.005, "normalize" : 0},
		  #{"cost" : "ielbo", "beta" : 1.0, "h" : 0.01, "normalize" : 0},
		  #{"cost" : "ielbo", "beta" : 1.0, "h" : 0.1, "normalize" : 0}
#		  ],

"samples" : [3], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

"batch_size_train" : 128,
"batch_size_eval" : 128,


"network_architecture" : [{
        "encoder" : [
            ("ConvNet2D", {"output_channels": [128, 256, 512, 1024],
			   "strides" : [2],
			   "paddings" : ["SAME"],
			   "kernel_shapes" : [[5, 5]]},  1),
	    ("BatchFlatten", {}, 0),
            ("GaussianDiagonal", {"output_size" : 20,
                                  "module_tuple" : ("LinearWN", {"use_weight_norm" : False}),
				  "minimal_covariance": 0.0
                                  }, 0)],
 
        "decoder" : [
		  ("Linear", {"output_size" : 4 * 4 * 1024}, 1),
		  ("BatchReshape", {"shape" : (4, 4, 1024)}, 0),
                  ("ConvNet2DTranspose", {"output_channels": [512, 256, 128, 3],
	                                  "output_shapes" : [[8, 8], [16, 16], [32, 32], [64, 64]],
				          "strides" : [2],
				          "paddings" : ["SAME"],
				          "kernel_shapes" : [[5, 5]]},      0),
		  ("BatchFlatten", {}, 0),
                  ("LogitNormalDiagonal", {"module_tuple" : ("LinearWN", {"use_weight_norm" : False}),
				           "minimal_covariance": 0.0
                                          }, 0)
            ]
	}],

#"weights_reg" : [("contrib.layers.l2_regularizer", {"scale" : 0.5})],
#"bias_reg" : [("contrib.layers.l2_regularizer",    {"scale" : 0.5})],

"weights_reg" : [None],
"bias_reg" :    [None],


"weights_init" : [("contrib.layers.xavier_initializer",{})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : 0.1})],
#	       ("constant_initializer", {'value' : 0.01})],

"activation" : ["relu", "elu"],
"epochs" : 100,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",

# how often to log stats (txt) and save summaries (related to the stats)
"stats_period" : 1,

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 10,

# how often to save other specific summaries
"save_summaries" : 1,
"save_summaries_period" : 10,

# skips the first k stats for the plot
"plot_offset" : 1,



"ImagesReconstructHook" : {"period" : 5,
                            "n_images_columns" : 10,
                            "images_indexes" : {
                                                "train" : [0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900],
                                                "validation" : [0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900],
                                                },
                            },

"ImagesGenerateHook" : {"period" : 5,
                        "n_images_columns" : 6,
                        "n_gen_samples" : 36
                        },

"PCALatentVariablesHook" : {"period" : 50,
                             },


#"LogpImportanceSamplingHook" : {"period" : 5,
#		       	        "n_samples" : [1,10,100],
#		     		"batch_size" : 128,
#                        	"repetitions" : 3
#                       	       },

"dirName" : "temp",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {2},
            "cores_per_GPU" : 1,
	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],



}
]
