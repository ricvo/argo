# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "MNIST",
"binary" : 0,
"flip_fraction" : 0.,
"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{

"model" : ["VAE.VAE"], #"VAE_IAF.VAE_IAF"
#"grad_clipping" : ("clip_by_value", {"value" : 3}), # NB not implemented in the filename
#"grad_clipping" : ("clip_by_norm", {"value" : 3}), # NB not implemented in the filename
"grad_clipping" : ("clip_by_global_norm", {"value" : 3}),

"stochastic" : [1],
"stochastic_noise_param" : [0.01], #0, ,0.00001,0.001,0.1,1

"denoising" : [0],
"rescale" : [0.00001],

"optimizer": [("AdamOptimizer", {"learning_rate" : 0.0001,
					  "beta1": 0.9,
                      			  "beta2":0.999})],

"cost_function": [#("IELBO", {"beta" : 1.0, "h" : 0.01, "normalize" : 1}),
                  ("Renyi", {"alpha": 0.5})
		  #{"cost" : "renyi", "beta" : 1.0, "alpha" : 0.9},
		  ],

"samples" : [1], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

"network_architecture" : [
        {
        "encoder" : [
            ("BatchFlatten", {}, 0),
            ("Linear", {"output_size" : 200}, 1),
            ("Linear", {"output_size" : 200}, 1),
            ("GaussianDiagonal", {"module_tuple" : ("LinearWN", {"output_size" : 20,
                                                                 "use_weight_norm" : False}),
				                                 "minimal_covariance": 0.0
                                  }, 0)
                    ],
                    #  "contractive_regularizer" : ("geometric_contractive_regularizer",
                                #                                {"scale_mean" : 0.1,
                                #                                "scale_covariance" : 0.1,
                                #                                "norm" : 2})
                                                 # }, 0)],
        "decoder" : [
            ("Linear", {"output_size" : 200}, 1),
            ("Linear", {"output_size" : 200}, 1),
            #("LogitNormalDiagonal", {"module_tuple" : ("LinearWN", {"use_weight_norm" : False}),
	    		#	 "minimal_covariance": 0.1 }, 0)
                ("GaussianDiagonalZeroOne", {
                                        "scalar_covariance" : scov,
                                        "module_tuple" : ("LinearWN", {"use_weight_norm" : False})}, 0)
                #("LogisticDiagonalZeroOne", {"module_tuple" : ("LinearWN", {"use_weight_norm" : False})}, 0)
             ]
        } for scov in [True, False, 0.1]
	],

#"weights_reg" : [("contrib.layers.l2_regularizer", {"scale" : 0.5})],
#"bias_reg" : [("contrib.layers.l2_regularizer",    {"scale" : 0.5})],

"weights_reg" : [None],
"bias_reg" :    [None],


"weights_init" : [("contrib.layers.xavier_initializer",{})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : 0.1})],

"activation" : ["elu", "relu"],
"epochs" : 300,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "steps",

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 100, #0.1,

# how often to log stats (txt) and save summaries
"save_summaries" : 1,
"save_summaries_period" : 100,
"stats_period" : 100,

# skips the first k stats for the plot
"plot_offset" : 1,


"GradientsHook" : {"period" : 100},

"ImagesInputHook" : {"period" : 100,
                     "how_many" : 18,
                     "n_images_columns" : 6},

"ImagesReconstructHook" : {"period" : 100,
                           "n_images_columns" : 6,
                           "images_indexes" : {
                                                 "train" : [0,100,200,300,400,500],
                                                 "validation" : [0,100,200,300,400,500],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 100,
                        "n_images_columns" : 6,
                        "n_gen_samples" : 18
                       },

"TwoDimPCALatentVariablesHook" : {"period" : 100,
                                  },

"PCALatentVariablesHook" : {"period" : 100,
                             },


"LogpImportanceSamplingHook" : {"period" : 100,
                                "n_samples" : [100],
                                "batch_size" : 1000,
                                "repetitions" : 1
                       	       },

#"VAELinearInterpolationHook" : {"period" : 10,
#                               "n_images" : 15,
#                               "images_indexes" : {
#                                                 "train" : [(0,50),
#                                                            (100,230),
#                                                            (200,790),
#                                                            (300,600),
#                                                            (400,1000)],
#                                                 "validation" : [(0,50),
#                                                                 (100,230),
#                                                                 (200,790),
#                                                                 (300,600),
#                                                                 (400,1000)],
#                                                 },
#                            },


"dirName" : "temp_steps",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {0,1,2},
            "cores_per_GPU" : 2,

	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],

}
]
