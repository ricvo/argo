# add here few words about what is the purpose of this experiment

##############################################################
[
{
"dataName" : "MNIST",
"binary" : 0,
"flip_fraction" : 0.,
"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{

"model" : ["VAE.VAE"], #"VAE_IAF.VAE_IAF"

"stochastic" : [1],
"stochastic_noise_param" : [0, 0.00001, 0.0001, 0.001],

"denoising" : [0, 1],
#"rescale" : [0.00001],

"optimizer": [("AdamOptimizer", {"learning_rate" : 0.0001,
	    		         "beta1": 0.9,
                      		 "beta2":0.999})],

#"grad_clipping" : ("clip_by_value", {"value" : 3}),
#"grad_clipping" : ("clip_by_norm", {"value" : 3}),
"grad_clipping" : ("clip_by_global_norm", {"value" : 3}), 


"cost_function": [#("IELBO", {"beta" : 1.0, "h" : 0.01, "normalize" : 1}),
                  ("ELBO", {"beta" : 1.0,
		            "warm_up_method" : ("warm_up", {"epoch" : 5})})
		  ],

"batch_size_train" : [64],
"batch_size_eval" : [500],

"samples" : [1, 3, 5, 10], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

"network_architecture" : [
        {
        "encoder" : [
            ("BatchFlatten", {}, 0),
            ("Linear", {"output_size" : 200}, 1),
            ("Linear", {"output_size" : 200}, 1),
            ("GaussianDiagonal", {"module_tuple" : ("LinearWN", {"output_size" : 20,
                                                                 "use_weight_norm" : False}),
				                                 "minimal_covariance": 0.0
                                  }, 0)
                    ],
                    #  "contractive_regularizer" : ("geometric_contractive_regularizer",
                                #                                {"scale_mean" : 0.1,
                                #                                "scale_covariance" : 0.1,
                                #                                "norm" : 2})
                                                 # }, 0)],
        "decoder" : [
            ("Linear", {"output_size" : 200}, 1),
            ("Linear", {"output_size" : 200}, 1),
            ("LogitNormalDiagonalPlusMinusOne", {"module_tuple" : ("LinearWN", {"use_weight_norm" : False}),
	    		    			 "minimal_covariance": 0.1,
						 "clip_value" : 0.0001}, 0)
                #("GaussianDiagonalZeroOne", {
                #                        "scalar_covariance" : scov,
                #                        "module_tuple" : ("LinearWN", {"use_weight_norm" : False})}, 0)
                #("LogisticDiagonalZeroOne", {"module_tuple" : ("LinearWN", {"use_weight_norm" : False})}, 0)
             ]
        } #for scov in [True, False, 0.1]
	],

#"weights_reg" : [("contrib.layers.l2_regularizer", {"scale" : 0.5})],
#"bias_reg" : [("contrib.layers.l2_regularizer",    {"scale" : 0.5})],

#"weights_reg" : [None],
#"bias_reg" :    [None],


"weights_init" : [("contrib.layers.xavier_initializer",{})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : 0.1})],

"activation" : ["elu", "relu"],
"epochs" : 300,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 10, #0.1,

# how often to log stats (txt) and save summaries
"save_summaries" : 0,
"save_summaries_period" : 100,
"stats_period" : 1,

# skips the first k stats for the plot
"plot_offset" : 0,


"GradientsHook" : {"period" : 10},

"ImagesInputHook" : {"period" : 50,
                     "how_many" : 18,
                     "n_images_columns" : 6},

"ImagesReconstructHook" : {"period" : 1,
                           "n_images_columns" : 6,
                           "images_indexes" : {
                                                 "train" : [0,100,200,300,400,500],
                                                 "validation" : [0,100,200,300,400,500],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 1,
                        "n_images_columns" : 6,
                        "n_gen_samples" : 18
                       },

"TwoDimPCALatentVariablesHook" : {"period" : 50,
                                  },

"PCALatentVariablesHook" : {"period" : 50,
                             },


"ImportanceSamplingHook" : [{"period" : 50,
                                "n_samples" : [1, 100, 1000],
                                "batch_size" : 100,
                                "repetitions" : 2
                       	   }],

"L2ReconstructHook" : {"period" : 10,
                            },
			    
#"FrechetInceptionDistanceHook" : [{"period" : 50,
#				   "n_batches" : 25
#				  },
#				  {"period" : 50,
#				   "n_batches" : 25,
#				   "pb" : "/home/luigi/prediction/natural/MNIST-c-st0/FF-cCE-st0-stp0-bs32-trGD_lr0.01-cNo-nD200_D200_D10-cpS-aR-wix-bic0.1-r0/saved_models/frozen_graph.pb",
#				   "id" : "MNIST",
#				   "input_tensor" : "inputs:0",
#				   "output_tensor" : "ff_network/network/features:0"
#				  },		  		  
#				  ],


"VAELinearInterpolationHook" : {"period" : 50,
                               "n_images" : 15,
                               "images_indexes" : {
                                                 "train" : [(0,50),
						            (100,230),
							    (200,790),
							    (300,600),
							    (400,1000)],
                                                 "validation" : [(0,50),
						                 (100,230),
							         (200,790),
							         (300,600),
							         (400,1000)],
                                                 },
                            },


"LatentVarsClassificationHook" : {"period" : 50,
			          "learning_rate" : 0.001,
                                  "steps" : 30000,
				  "repetitions" : 5
                       	      	 },




#"plot_misclassified_images" : 1,
#"n_misclassified_images" : 100,


#"dirName" : "experiments_importance_sampling",
"dirName" : "/data1/temp",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {0,1,2},
            "cores_per_GPU" : 2,

	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],

}
]
