# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "MNIST",
"binary" : 1,
"vect" : False,
"stochastic" : 1,
},
{

"model" : ["VAE.VAE"],

# for binary, we add a bit flip to the images with probability given by 'stochastic_noise_param'
"stochastic" : [1],
"stochastic_noise_param" : [0], # 0.05, 0.1],

"denoising" : [0],

#"rescale" : [0, 0.0001],

"optimizer": [("AdamOptimizer", {"learning_rate" : learning_rate,
	    		         "beta1": 0.9,
                      		 "beta2": 0.999})
	     			  for learning_rate in [0.001]], # , 0.005, 0.01


"grad_clipping" : [#("clip_by_global_norm", {"value" : 10}),
                   ("clip_by_global_norm", {"value" : 100})], # NB not implemented in the filename

"cost_function": [#("ELBO", {"beta" : 1.0,
		  #          "warm_up_method" : (None, {})}),
		  ("ELBO", {"beta" : 1.0,
		            "warm_up_method" : ("warm_up", {"epoch" : 10})}),
	          ("ELBO", {"beta" : 1.0,
		            "warm_up_method" : ("warm_up", {"epoch" : 100})})
	         ],


"samples" : [5], #1, 5, 10],
#"bit_flip" : [0],
#"drop_out" : [0],
#"latent_noise" : [0],


"network_architecture" : [
     {
       "encoder" : [
            ("BatchFlatten", {}, 0),
	    #("Dropout", {"rate" : rate}, 0),
            ("Linear", {"output_size" : 200}, 1),
            ("Linear", {"output_size" : 200}, 1),
	    ("GaussianDiagonal", {"output_size" : 40, "module_tuple" : ("Linear", {})}, 0)],
	    #("vonMisesFisher", {"output_size" : size_z,
	    #    	        "minimal_concentration" : min_conc,
	    #			"concentration_parameterization" : "softplus",
	    #			"module_tuple" : ("Linear", {})}, 0)],
				
         	    
        "decoder" : [
            ("Linear", {"output_size" : 200}, 1),
            ("Linear", {"output_size" : 200}, 1),
     	    ("BernoulliPlusMinusOne", {"clip_value" : 0.0001},  0)]
     } for size_z in [20,30,40] for min_conc in [0.1, 0.5, 1.0] #for rate in [0, 0.05, 0.1]
		],

"covariance_parameterization" : ["softplus", "linear_softplus"], 

"weights_reg" : [None],
"bias_reg" : [None],

"regularizers" : [{"encoder" : {"custom" : [("autoencoding_regularizer", {"distance_function" : "kl", "scale" : 0.1})]}}],

"weights_init" : [("contrib.layers.xavier_initializer",{})],  # !!! truncated normal
"bias_init" :    [("constant_initializer", {'value' : 0.1})],
#	         ("constant_initializer", {'value' : 0.01})],

"batch_size_train" : [32],
"batch_size_eval" : [1000],

"activation" : ["elu"], # "relu"],
"epochs" : 500,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",

"save_model" : 1,
"save_model_period" : 100,

"save_summaries" : 0,
"save_summaries_period" : 100,
"stats_period" : 1,

"plot_offset" : 0,

"GradientsHook" : {"period" : 10},

"ImagesInputHook" : {"period" : 50,
                     "how_many" : 30,
                     "n_images_columns" : 10},

"ImagesReconstructHook" : {"period" : 50,
                           "n_images_columns" : 10,
                           "images_indexes" : {
                                                 "train" : [0,100,200,300,400,500,10,1100,1200,1300,1,101,201,301,401,501,11,1101,1201,1301],
                                                 "validation" : [0,100,200,300,400,500,10,1100,1200,1300,1,101,201,301,401,501,11,1101,1201,1301],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 50,
                        "n_images_columns" : 10,
                        "n_gen_samples" : 100
                       },

#"TwoDimPCALatentVariablesHook" : {"period" : 50,
#                                  },

#"PCALatentVariablesHook" : {"period" : 50,
#                             },

#"VAELinearInterpolationHook" : {"period" : 50,
#                               "n_images" : 15,
#                               "images_indexes" : {
#                                                 "train" : [(0,50),
#						            (100,230),
#							    (200,790),
#							    (300,600),
#							    (400,1000)],
#                                                 "validation" : [(0,50),
#						                 (100,230),
#							         (200,790),
#							         (300,600),
#							         (400,1000)],
#                                                 },
#                            },


"ImportanceSamplingHook" : [{"period" : 2,
                                "n_samples" : [10],
                                "batch_size" : 100,
                                "repetitions" : 2
                       	   },{"period" : 3,
                                "n_samples" : [1, 100],
                                "batch_size" : 100,
                                "repetitions" : 1
                       	   }
			   ],


#"dirName" : "temp_new_plus_minus",

"dirName" : "new_experiments_cehck_everything_ok",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : {7},
            "cores_per_GPU" : 2,
	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],

}
]
