# add here few words about what is the purpose of this experiment
# keep only one experiment per file

##############################################################
[
{
"dataName" : "GTSRB",
"vect" : False  # False if starting with convolutional, True will give the dataset already vectorialized (reshaped -1)
},
{

"model" : ["VAE.VAE"], #"VAE_IAF.VAE_IAF"

"stochastic" : [2],
"stochastic_noise_param" : [0.3], #0, ,0.00001,0.001,0.1,1
"denoising" : [1],


"batch_size_train" : [32],
"batch_size_eval" : [32],


"optimizer": [("AdamOptimizer", {"learning_rate" : 0.0001,
				 "beta1": 0.9,
                      		 "beta2":0.999})],

"grad_clipping" : ("clip_by_global_norm", {"value" : 100.0}),


"cost_function": [
                  ("ELBO", {"beta" : 1.0,
		            "warm_up_method" : ("warm_up", {"epoch" : 50})})
		  ],

"samples" : [10], # 1 or more
"covariance_parameterization" : "softplus", # "exp" or "softplus"

# see https://github.com/hwalsuklee/tensorflow-generative-model-collections/blob/master/VAE.py
# and https://github.com/hwalsuklee/tensorflow-generative-model-collections/blob/master/ops.py
"network_architecture" : [{
        "encoder" : [
        ("VGGBlock", {"channels" : 32, "kernel_shape" : 3, "prob_drop": 0.1}, 0),
	    ("VGGBlock", {"channels" : 64, "kernel_shape" : 3, "prob_drop": 0.1}, 0),
	    ("BatchFlatten", {}, 0),
	    ("Linear", {"output_size" : 512}, 0),
	    ("BatchNorm", {"offset" : 1, "scale" : 1, "decay_rate" : 0.9}, 1),
        ("GaussianDiagonal", {"output_size" : 90,
                              "module_tuple" : ("Linear", {}),
				              },
				              0)
        ],

        "decoder" : [
	    ("Linear", {"output_size" : 90 * 7 * 7}, 0),
	    ("BatchNorm", {"offset" : 1, "scale" : 1, "decay_rate" : 0.9}, 1),
        ("BatchReshape", {"shape" : (7, 7, 90)}, 0),
        # ("Conv2DTranspose", {"output_channels" : 64, "output_shape" : [14, 14], "kernel_shape" : 4, "stride" : 2}, 0),
	    # ("BatchNorm", {"offset" : 1, "scale" : 1, "decay_rate" : 0.9}, 1),
        ("Conv2DTranspose", {"output_channels" : 1, "output_shape" : [28, 28], "kernel_shape" : 4, "stride" : 4}, 1),
	    ("BatchFlatten", {}, 0),
        ("GaussianDiagonalPlusMinusOne", {"module_tuple" : ("Linear", {}),
                                        "minimal_covariance" : 1e-2}, 0)
        ]
	    }
	    ],

"weights_reg" : [("contrib.layers.l2_regularizer", {"scale" : 1e-4})],
"bias_reg" : [("contrib.layers.l2_regularizer",    {"scale" : 1e-4})],

"regularizers" : [{"decoder" : {"custom" : [("perceptual_loss", {"pb" : "/data3/test_vgg_perc_features/renorm/GTSRB/FF-cCE-st2-stp0.1-bs100-trA_lr0.0001_bo0.9_bt0.999-cGN100-nVc64k3d0.1_Vc64k3d0.1_D512_D43-cpS-aR-wix-bic0.1-wrLtwo0.001-brLtwo0.001-r0/saved_models/frozen_graph.pb",
                                        "input" : "inputs:0",
#                                         "nodes" : ["ff_network/network/vggB/perceptual_features1/Identity:0", "ff_network/network/vggB/perceptual_features2/Identity:0"],
                                        "matching" : ["perceptual_features"],
                                        "scale" : 0.001})]}}],

#"weights_reg" : [None],
#"bias_reg" :    [None],

"weights_init" : [("contrib.layers.xavier_initializer", {})], # ("truncated_normal_initializer", {"stddev" : 0.02})],  # !!! truncated normal
"bias_init" : [("constant_initializer", {'value' : 0.1})], #   ("constant_initializer", {'value' : 0.0})],

"activation" : ["relu"],  #"relu"
"epochs" : 3,

},
{
"check_ops" : 0,

# choose steps or epochs
"time_reference" : "epochs",

# how often to log stats (txt) and save summaries (related to the stats)
"stats_period" : 1,

# choose to save the model every n steps
"save_model" : 1,
"save_model_period" : 50,

# how often to save other specific summaries
"save_summaries" : 0,
"save_summaries_period" : 10,
"save_max_to_keep" : 3,

# skips the first k stats for the plot
"plot_offset" : 1,


"GradientsHook" : {"period" : 10},

"ImagesInputHook" : {"period" : 100,
                     "how_many" : 18,
                     "n_images_columns" : 6},

"ImagesReconstructHook" : {"period" : 10,
                           "n_images_columns" : 19,
                           "images_indexes" : {
                                                 "train" : [0,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950],
                                                 "validation" : [0,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950],
                                                 },
                            },

"ImagesGenerateHook" : {"period" : 50,
                        "n_images_columns" : 6,
                        "n_gen_samples" : 18
                       },

"TwoDimPCALatentVariablesHook" : {"period" : 50,
                                  },

"PCALatentVariablesHook" : {"period" : 50,
                             },


"ImportanceSamplingHook" : [{"period" : 50,
                                "n_samples" : [1, 100, 1000],
                                "batch_size" : 10,
                                "repetitions" : 1
                       	   }],

#"FrechetInceptionDistanceHook" : [{"period" : 50,
#				   "n_batches" : 25
#				  },
#				  {"period" : 50,
#				   "n_batches" : 25,
#				   "pb" : "/home/luigi/prediction/natural/MNIST-c-st0/FF-cCE-st0-stp0-bs32-trGD_lr0.01-cNo-nD200_D200_D10-cpS-aR-wix-bic0.1-r0/saved_models/frozen_graph.pb",
#				   "id" : "MNIST",
#				   "input_tensor" : "inputs:0",
#				   "output_tensor" : "ff_network/network/features:0"
#				  },
#				  ],


"VAELinearInterpolationHook" : {"period" : 50,
                               "n_images" : 15,
                               "images_indexes" : {
                                                 "train" : [(0,50),
						            (100,230),
							    (200,790),
							    (300,600),
							    (400,1000)],
                                                 "validation" : [(0,50),
						                 (100,230),
							         (200,790),
							         (300,600),
							         (400,1000)],
                                                 },
                            },


"LatentVarsClassificationHook" : {"period" : 50,
			          "learning_rate" : 0.001,
                                  "steps" : 30000,
				  "repetitions" : 2
                       	      	 },


#"LogpImportanceSamplingHook" : {"period" : 50,
#		       	        "n_samples" : [1,10],
#		     		"batch_size" : 100,
#				"repetitions" : 2
#                       	       },
    
"dirName" : "/data3/test_vgg_perc_features",

"seed" : 0,
"runs" : 1,

"nodes" : [{"used_GPUs" : [2],
            "cores_per_GPU" : 2,
	    "IP": "localhost"   #  num_consumers = multiprocessing.cpu_count() * 2
	   }
	   ],

}
]
