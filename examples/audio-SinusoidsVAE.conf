# add here few words about what is the purpose of this experiment
# keep only one experiment per file

# Here you can find an example of using the WaventGaussianVisualizationHook
##############################################################
[
    {
        "dataName": "Sinusoids",
        # "crop_length": 1024,
        "stochastic": 0,
        #           0        1        2         3         4        5       6              7
        "type": ["clean", "fade", "fadein", "fadeout", "switch", "mix", "saw_tooth", "mix_conditioned"][7]
        # "shuffle_buffer" : 4000,
    },
    {
        "model": "WavenetVAE.WavenetVAE",
        "stochastic": [0],
        "stochastic_noise_param": [0],  # [0.03], #0, ,0.00001,0.001,0.1,1
        "denoising": [0],
        #"pretrained_checkpoint": "/data1/csongor/HB/SinusoidsVAE/SIN-tpmix_conditioned/WAVENET_VAE-cWELBO_wuW200_0.1KL+65000.0MMD-d0-st0-stp0-bs32-trA_lr0.0002_bo0.9_bt0.999-cGN7-st5-l10-fl3-hc512-hl64-oc128-sc256-lc8-ar1.0-dr_avg_pool-dp0-lpNO-up0-vlGTDP-r0/saved_models/model.ckpt-790372.data-00000-of-00001",
        "pretrained_checkpoint": "/data1/csongor/HB/SinusoidsVAE/SIN-tpmix_conditioned/WAVENET_VAE-cWELBO_wuW200_0.1KL+65000.0MMD-d0-st0-stp0-bs32-trA_lr0.0002_bo0.9_bt0.999-cGN7-st5-l10-fl3-hc512-hl64-oc128-sc256-lc8-ar1.0-dr_avg_pool-dp0-lpNO-up0-vlGTDP-r0/saved_models/model.ckpt-352",

        "optimizer": [("AdamOptimizer", {"learning_rate": 0.0002,
                                         "beta1": 0.9,
                                         "beta2": 0.999})],

        "grad_clipping": ("clip_by_global_norm", {"value": 7.0}),  # NB not implemented in the filename

        "cost_function": [
            ("WavenetELBO", {"beta": 1.0,
                             "warm_up_method": ("warm_up", {"epoch": 200}),
                             # "warm_up_method": None,
                             'latent_regularizations': [{'type': 'KL', 'weight': 0.1, 'use_warmup': True},
                                                       {'type': 'MMD', 'weight': 65000, 'use_warmup': False},
                                                        {'type': 'sigma', 'weight': 100, 'use_warmup': False},
                                                       {'type': 'mu-VAE', 'weight': 1.0, 'use_warmup': False},
                                                       ][0:2]
                             })],
        #
        # "note": "",

        "batch_size_train": 32,
        "batch_size_eval": 32,

        # "network_architecture": [{"num_layers_per_stage": 10,
        #                           "num_layers": 20,
        #                           "filter_length": 3,
        #                           "d_hidden_channels": 512,
        #                           "hop_length": hopl,
        #                           "e_hidden_channels": 128,
        #                           "skip_channels": 256,
        #                           "latent_channels": ch_z,
        #                           "variational_layer": vl,
        #                           "n_z_samples": 1,
        #                           "p_dropout_decoder_tf": 0,
        #                           "dim_reduction": ['avg_pool', 'max_pool', 'conv', 'linear'][0],
        #                           "alpha_rescale": 1.0}
        #                          for hopl in [64] for ch_z in [3] for vl in
        #                          [*["GaussianTriDiagonalPrecision", "GaussianTriDiagonal", "GaussianDiagonal"][0:1]]
        #                          ],

        "network_architecture": [{"num_layers_per_stage": 5,
                                  "num_layers": 10,
                                  "filter_length": 3,
                                  "d_hidden_channels": d_hidden,  # -hc
                                  "hop_length": 64,
                                  "e_hidden_channels": e_hidden,  # if > 128 -> memory error -oc
                                  "skip_channels": 256,  # -sc
                                  "latent_channels": ch_z,
                                  "variational_layer": vl,
                                  "n_z_samples": 1,
                                  "p_dropout_decoder_tf": 0,
                                  "dim_reduction": ['avg_pool', 'max_pool', 'conv', 'linear'][0],
                                  "alpha_rescale": 1.0,
                                  "learn_prior": ['CONV', 'MAF', 'NO'][2],
                                  "flow_params": {'name': 'MAF', 'num_bijectors': 4, 'hidden_channels': 512,
                                                  'permute': False},
                                  "upsample_encoding": False}
                                 # for hopl in [64] for ch_z in [8] for d_hidden in [128, 512] for e_hidden in [128, 512] for skip in [256] for ar in [1.0] for lp in [True] for vl in
                                 for ch_z in [8] for d_hidden in [512] for e_hidden in [128] for vl in
                                 # ["GaussianTriDiagonal", "GaussianTriDiagonalPrecision", "GaussianDiagonal"][:2]
                                 ["GaussianTriDiagonalPrecision"]
                                 # ["GaussianTriDiagonal"]
                                 # ["GaussianDiagonal"]
                                 ],

        "epochs": 50,

    },
    {
        "check_ops": 0,

        # choose steps or epochs
        "time_reference": "epochs",

        # how often to log stats (txt) and save summaries (related to the stats)
        "stats_period": 10,

        # choose to save the model every n steps
        "save_model": 1,
        "save_model_period": 10,

        # how often to save other specific summaries
        "save_summaries": 1,
        "save_summaries_period": 100,

        # skips the first k stats for the plot
        "plot_offset": 1,

        "WavReconstructHook": {"period": 100,
                               "save_wav": False,
                               'reconstruct_from_mean': True,
                               '_plot': True,
                               'spider_plot_time_splits': None,
                               #'log_reconstr_loss': False,
                               'batch_size': 25,
                               "sample_indices_by_dataset": {
                                   "train": [0, 32, 64],
                                   "validation": [0, 32, 64, 96],
                               },
                               },
        # "WavenetGaussianVisualizationHook" : {  "period" : 50,
        #                        "sample_indices_by_dataset" : {
        #                                    "train" : [0,11,22,33,44],
        #                                    "validation" : [0,11,22,33,44],
        #                                    },
        #                        },

        "WavGenerateHook": {"period": 5000,  # 5000
                            "save_wav": False,
                            '_plot': True,
                            'spider_plot_time_splits': None,
                            'generate_from_mean': True,
                            'compute_reconstruction_metrics': True,
                            #'log_reconstr_loss': True,
                            "sample_indices_by_dataset": {
                                # "validation" : [0, 2, 5, 11, 55, 64]
                                "train": [0, 5, 10],
                                'validation': [0, 5, 64]
                                # 'train': None,
                                # 'validation': None
                            },
                            "fast_gen": True,  # use fast_generation wavenet for reconstruction without teacher forcing
                            "debug_fast_gen": False,
                            # use fast_generation wavenet with the true input shifted and quantized to reconstruct with teacher forcing and check the FastGen network

                            },

        # "TwoDimPCALatentVariablesHook" : {"period" : 20,
        #                                  },

        # "PCALatentVariablesHook" : {"period" : 10,
        #                             },

        "dirName" : "/data1/csongor/HB/SinusoidsVAE",

        "seed": 0,
        "runs": 1,

        "nodes": [{"used_GPUs": [2],
                   "cores_per_GPU": 1,
                   "IP": "localhost"  # num_consumers = multiprocessing.cpu_count() * 2
                   }
                  ]

    }
]
